#!/usr/bin/env bash

set -e -u -x
source ./tasks/helpers.sh
source ./tasks/helpers/detect_os_release.sh

# shellcheck source=build/package_dependencies.sh
source "$SOURCE_DIR/build/package_dependencies.sh"

install_dependencies=("${all_build_dependencies[@]}")
if [ "${INSTALL_TEST_DEPENDENCIES:-}" == "true" ]; then
  install_dependencies=("${all_dependencies[@]}")
fi

detect_os_release
if [[ "$ID_NORMALIZED" == "rhel" && "$VERSION_ID" == "7" ]]; then
  # Dependencies for GCC 7+ for compiling TrafficServer (C++17 required).
  yum -y install centos-release-scl

  yum -y install "${install_dependencies[@]}"
  # Ensure the packages got installed, since yum's exit code isn't always
  # useful: http://stackoverflow.com/a/22393088
  rpm --query --queryformat "" "${install_dependencies[@]}"
elif [[ "$ID_NORMALIZED" == "debian" ]]; then
  # Dependencies for GCC 7+ or Clang 5+ for compiling TrafficServer (C++17
  # required).
  if [[ "$ID" == "debian" && "$VERSION_ID" == "9" ]]; then
    apt-get update
    DEBIAN_FRONTEND=noninteractive apt-get -y --no-install-recommends install curl ca-certificates gnupg
    curl -sS https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -
    if [[ "$ID" == "debian" && "$VERSION_ID" == "8" ]]; then
      echo "deb http://apt.llvm.org/jessie/ llvm-toolchain-jessie-7 main" > /etc/apt/sources.list.d/api-umbrella-llvm.list
    else
      echo "deb http://apt.llvm.org/stretch/ llvm-toolchain-stretch-7 main" > /etc/apt/sources.list.d/api-umbrella-llvm.list
    fi
  fi

  apt-get update
  DEBIAN_FRONTEND=noninteractive apt-get -y --no-install-recommends install "${install_dependencies[@]}"
else
  echo "Unknown build system"
  exit 1
fi

if [ "${INSTALL_TEST_DEPENDENCIES:-}" == "true" ]; then
  if [ "$ID" == "debian" ]; then
    if [ "$TARGETARCH" == "amd64" ]; then
      # Add Chrome for integration tests, similar to how the CircleCI images add it:
      # https://github.com/CircleCI-Public/circleci-dockerfiles/blob/c24e69355b400aaba34a1ddfc55cdb1fef9dedff/buildpack-deps/images/xenial/browsers/Dockerfile#L47
      apt-get -y install curl gnupg2 unzip
      curl --silent --show-error --location --fail --retry 3 --output /tmp/google-chrome-stable_current_amd64.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
      (dpkg -i /tmp/google-chrome-stable_current_amd64.deb || apt-get -fy install)
      rm -f /tmp/google-chrome-stable_current_amd64.deb
      sed -i 's|HERE/chrome"|HERE/chrome" --disable-setuid-sandbox --no-sandbox|g' /opt/google/chrome/google-chrome
      google-chrome --version
      CHROME_VERSION="$(google-chrome --version)"
      CHROMEDRIVER_RELEASE=${CHROME_VERSION/Google Chrome /}
      CHROMEDRIVER_RELEASE=${CHROMEDRIVER_RELEASE%%.*}
      CHROMEDRIVER_VERSION=$(curl --silent --show-error --location --fail --retry 4 --retry-delay 5 "http://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROMEDRIVER_RELEASE}")
      curl --silent --show-error --location --fail --retry 4 --retry-delay 5 --output /tmp/chromedriver_linux64.zip "http://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip"
      cd /tmp
      unzip chromedriver_linux64.zip
      rm -rf chromedriver_linux64.zip
      mv chromedriver /usr/local/bin/chromedriver
      chmod +x /usr/local/bin/chromedriver
      chromedriver --version
    else
      # For ARM platforms, Chrome stable doesn't exist, so use Chromium
      # instead. chromedriver also doesn't exist, so use Electron's ARM builds
      # instead.
      apt-get -y install chromium curl unzip
      chromium --version
      curl -fsSL -o /tmp/chromedriver-v22.0.0-linux-arm64.zip https://github.com/electron/electron/releases/download/v22.0.0/chromedriver-v22.0.0-linux-arm64.zip
      unzip -d /usr/local/bin /tmp/chromedriver-v22.0.0-linux-arm64.zip chromedriver
      chromedriver --version
    fi
  fi
fi
