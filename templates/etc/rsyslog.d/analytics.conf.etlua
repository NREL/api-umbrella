# Ensure we have only valid UTF-8 characters in the log message (otherwise
# ElasticSearch is unhappy).
action(name="analytics-utf8fix" type="mmutf8fix")

# Parse the JSON data out of the @cee-enhanced logs.
action(name="analytics-jsonparse" type="mmjsonparse")

<% if config["analytics"]["_output_elasticsearch?"] then %>
  # Define the ElasticSearch-based output.
  # This aliases some of the logged fields to different names for backwards
  # compatibility with the ElasticSearch data.
  if($!raw!api_backend_id != "") then {
    set $!usr!es!api_backend_id = $!raw!api_backend_id;
  }
  if($!raw!api_backend_url_match_id != "") then {
    set $!usr!es!api_backend_url_match_id = $!raw!api_backend_url_match_id;
  }
  if($!raw!legacy_api_key != "") then {
    set $!usr!es!api_key = $!raw!legacy_api_key;
  }
  if($!raw!denied_reason != "") then {
    set $!usr!es!gatekeeper_denied_code = $!raw!denied_reason;
  }
  if($!raw!request_accept != "") then {
    set $!usr!es!request_accept = $!raw!request_accept;
  }
  if($!raw!request_accept_encoding != "") then {
    set $!usr!es!request_accept_encoding = $!raw!request_accept_encoding;
  }
  if($!raw!timestamp_utc != "") then {
    set $!usr!es!request_at = $!raw!timestamp_utc;
  }
  if($!raw!request_basic_auth_username != "") then {
    set $!usr!es!request_basic_auth_username = $!raw!request_basic_auth_username;
  }
  if($!raw!request_connection != "") then {
    set $!usr!es!request_connection = $!raw!request_connection;
  }
  if($!raw!request_content_type != "") then {
    set $!usr!es!request_content_type = $!raw!request_content_type;
  }
  <% if config["elasticsearch"]["_template_version_v1?"] then %>
    if($!raw!request_url_hierarchy != "") then {
      set $!usr!es!request_hierarchy = $!raw!request_url_hierarchy;
    }
  <% end %>
  <% if config["elasticsearch"]["_template_version_v2?"] then %>
    if($!raw!request_url_hierarchy_level0 != "") then {
      set $!usr!es!request_url_hierarchy_level0 = $!raw!request_url_hierarchy_level0;
    }
    if($!raw!request_url_hierarchy_level1 != "") then {
      set $!usr!es!request_url_hierarchy_level1 = $!raw!request_url_hierarchy_level1;
    }
    if($!raw!request_url_hierarchy_level2 != "") then {
      set $!usr!es!request_url_hierarchy_level2 = $!raw!request_url_hierarchy_level2;
    }
    if($!raw!request_url_hierarchy_level3 != "") then {
      set $!usr!es!request_url_hierarchy_level3 = $!raw!request_url_hierarchy_level3;
    }
    if($!raw!request_url_hierarchy_level4 != "") then {
      set $!usr!es!request_url_hierarchy_level4 = $!raw!request_url_hierarchy_level4;
    }
    if($!raw!request_url_hierarchy_level5 != "") then {
      set $!usr!es!request_url_hierarchy_level5 = $!raw!request_url_hierarchy_level5;
    }
    if($!raw!request_url_hierarchy_level6 != "") then {
      set $!usr!es!request_url_hierarchy_level6 = $!raw!request_url_hierarchy_level6;
    }
  <% end %>
  if($!raw!request_url_host != "") then {
    set $!usr!es!request_host = $!raw!request_url_host;
  }
  if($!raw!request_ip != "") then {
    set $!usr!es!request_ip = $!raw!request_ip;
  }
  if($!raw!request_ip_city != "") then {
    set $!usr!es!request_ip_city = $!raw!request_ip_city;
  }
  if($!raw!request_ip_country != "") then {
    set $!usr!es!request_ip_country = $!raw!request_ip_country;
  }
  if($!raw!request_ip_region != "") then {
    set $!usr!es!request_ip_region = $!raw!request_ip_region;
  }
  if($!raw!request_method != "") then {
    set $!usr!es!request_method = $!raw!request_method;
  }
  if($!raw!request_origin != "") then {
    set $!usr!es!request_origin = $!raw!request_origin;
  }
  if($!raw!request_url_path != "") then {
    set $!usr!es!request_path = $!raw!request_url_path;
  }
  if($!raw!request_referer != "") then {
    set $!usr!es!request_referer = $!raw!request_referer;
  }
  if($!raw!request_url_scheme != "") then {
    set $!usr!es!request_scheme = $!raw!request_url_scheme;
  }
  if($!raw!request_size != "") then {
    set $!usr!es!request_size = $!raw!request_size;
  }
  <% if config["elasticsearch"]["_template_version_v1?"] then %>
    if($!raw!legacy_request_url != "") then {
      set $!usr!es!request_url = $!raw!legacy_request_url;
    }
  <% end %>
  if($!raw!request_url_query != "") then {
    set $!usr!es!request_url_query = $!raw!request_url_query;
  }
  if($!raw!request_user_agent != "") then {
    set $!usr!es!request_user_agent = $!raw!request_user_agent;
  }
  if($!raw!request_user_agent_family != "") then {
    set $!usr!es!request_user_agent_family = $!raw!request_user_agent_family;
  }
  if($!raw!request_user_agent_type != "") then {
    set $!usr!es!request_user_agent_type = $!raw!request_user_agent_type;
  }
  if($!raw!response_age != "") then {
    set $!usr!es!response_age = $!raw!response_age;
  }
  if($!raw!response_cache != "") then {
    set $!usr!es!response_cache = $!raw!response_cache;
  }
  if($!raw!response_content_encoding != "") then {
    set $!usr!es!response_content_encoding = $!raw!response_content_encoding;
  }
  if($!raw!response_content_length != "") then {
    set $!usr!es!response_content_length = $!raw!response_content_length;
  }
  if($!raw!response_content_type != "") then {
    set $!usr!es!response_content_type = $!raw!response_content_type;
  }
  if($!raw!response_server != "") then {
    set $!usr!es!response_server = $!raw!response_server;
  }
  if($!raw!response_size != "") then {
    set $!usr!es!response_size = $!raw!response_size;
  }
  if($!raw!response_status != "") then {
    set $!usr!es!response_status = $!raw!response_status;
  }
  if($!raw!timer_response != "") then {
    set $!usr!es!response_time = $!raw!timer_response;
  }
  if($!raw!response_transfer_encoding != "") then {
    set $!usr!es!response_transfer_encoding = $!raw!response_transfer_encoding;
  }
  if($!raw!legacy_user_email != "") then {
    set $!usr!es!user_email = $!raw!legacy_user_email;
  }
  if($!raw!user_id != "") then {
    set $!usr!es!user_id = $!raw!user_id;
  }
  if($!raw!legacy_user_registration_source != "") then {
    set $!usr!es!user_registration_source = $!raw!legacy_user_registration_source;
  }

  # Output to ElasticSearch.
  # A disk-assisted memory queue is used for buffering.
  action(
    name="analytics-output-elasticsearch"
    type="omelasticsearch"
    server="<%- config["elasticsearch"]["_first_server"]["host"] %>"
    serverport="<%- config["elasticsearch"]["_first_server"]["port"] %>"
    <% if config["elasticsearch"]["_first_server"]["_https?"] then %>
      usehttps="on"
    <% end %>
    <% if config["elasticsearch"]["_first_server"]["user"] then %>
      uid="<%- config["elasticsearch"]["_first_server"]["user"] %>"
    <% end %>
    <% if config["elasticsearch"]["_first_server"]["password"] then %>
      pwd="<%- config["elasticsearch"]["_first_server"]["password"] %>"
    <% end %>
    searchIndex="elasticsearch-index"
    dynSearchIndex="on"
    searchType="<%- config["elasticsearch"]["index_mapping_type"] %>"
    template="elasticsearch-json-record"

    # Enable bulk indexing, so batches of records are sent as a single HTTP
    # request.
    bulkmode="on"
    bulkId="elasticsearch-id"
    dynBulkId="on"

    errorfile="<%- config["log_dir"] %>/rsyslog/elasticsearch_error.log"

    # Allow bulk indexing of batches *up to* this size.
    #
    # Note that as long as Elasticsearch is keeping up and data isn't being
    # queued by rsyslog, then rsyslog will send data as quickly as it can to
    # Elasticsearch (so the batch sizes might be much smaller). See
    # http://www.gossamer-threads.com/lists/rsyslog/users/17550
    queue.dequeuebatchsize="5000"

    # For the in-memory queue, use a linked-list (so the memory doesn't have to
    # be pre-allocated based on a fixed size).
    queue.type="LinkedList"

    # Set a filename, so the queue is disk assisted. This allows for offloading
    # the data from the memory queue to disk if the queue becomes bigger than
    # expected.
    queue.filename="queue-elasticsearch"

    # Set thresholds for when the memory queue is too big and should use the
    # disk (note the disk queue size is not bounded by the queue.size, that only
    # applies to the memory portion).
    queue.size="15000"
    queue.highwatermark="10000"
    queue.lowwatermark="2000"

    # Persist data to disk on this interval (in seconds). We're okay with some
    # loss in the event of unexpected failures.
    queue.checkpointinterval="10"

    # Persist data to disk on graceful shutdowns.
    queue.saveonshutdown="on"

    # If Elasticsearch is inaccessible, retry on this interval (in seconds)
    # indefinitely (so we don't stop logging to Elasticsearch in case it goes
    # down for a longer period of time).
    action.resumeInterval="30"
    action.resumeRetryCount="-1"
  )
<% end %>
