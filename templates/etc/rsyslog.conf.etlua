# Allow for longer message sizes to handle the JSON data containing long URLs
# or HTTP headers.
global(maxMessageSize="32k")

global(workDirectory="<%- config["db_dir"] %>/rsyslog")

# Load Modules
module(load="imfile")
module(load="imtcp" MaxSessions="500")
module(load="mmjsonparse")
module(load="mmutf8fix")
<% if config["log"]["destination"] == "console" then %>
  module(load="omstdout")
<% end %>
<% if config["analytics"]["_output_elasticsearch?"] then %>
  module(load="omelasticsearch")
<% end %>

# Define templates for ElasticSearch output.
<% if config["elasticsearch"]["_index_partition_monthly?"] then %>
  template(name="elasticsearch-index" type="string" string="<%- config["elasticsearch"]["index_name_prefix"] %>-logs-write-%timereported:1:7:date-rfc3339,date-utc%")
<% end %>
<% if config["elasticsearch"]["_index_partition_daily?"] then %>
  template(name="elasticsearch-index" type="string" string="<%- config["elasticsearch"]["index_name_prefix"] %>-logs-write-%timereported:1:10:date-rfc3339,date-utc%")
<% end %>
template(name="elasticsearch-id" type="subtree" subtree="$!raw!id")
template(name="elasticsearch-json-record" type="subtree" subtree="$!usr!es")
template(name="all-json-record" type="list") {
  property(name="$!raw") constant(value="\n")
}

template(name="template-stdout" type="list") {
  constant(value="[")
  property(name="syslogtag")
  constant(value="]")
  property(name="msg" spifno1stsp="on")
  property(name="msg" droplastlf="on")
  constant(value="\n")
}

ruleset(name="analytics-ruleset" queue.type="FixedArray" queue.size="5000") {
  include(file="<%- config["etc_dir"] %>/rsyslog.d/analytics.conf")
}

<% if config["log"]["destination"] == "console" then %>
  ruleset(name="logs-ruleset" queue.type="FixedArray" queue.size="5000") {
    action(
      name="output-logs-stdout"
      type="omstdout"
      template="template-stdout"
    )
  }

  # Workaround for error.log currently being hard-coded to output to a file
  # that won't work if symlinked to /dev/stdout (it insists on rolling the file
  # since it doesn't think it can write to it).
  #
  # This workaround should no longer be needed once Trafficserver 10 is
  # released and things can be configured to output to stdout/stderr directly:
  # https://github.com/apache/trafficserver/pull/7937
  input(type="imfile" file="<%- config["log_dir"] %>/trafficserver/error.log" tag="trafficserver-error" ruleset="logs-ruleset")
<% end %>

# TCP Input
input(type="imtcp" address="<%- config["rsyslog"]["host"] %>" port="<%- config["rsyslog"]["port"] %>" ruleset="analytics-ruleset")

ruleset(name="stats-ruleset" queue.type="FixedArray" queue.size="5000") {
  <% if config["log"]["destination"] == "console" then %>
    action(
      name="output-stats-stdout"
      type="omstdout"
      template="template-stdout"
    )
  <% else %>
    action(
      name="output-stats-file"
      type="omfile"
      file="<%- config["log_dir"] %>/rsyslog/stats.log"
    )
  <% end %>
}

# Output queue statistics periodically so the health of the queue can be
# inspected.
module(
  load="impstats"
  interval="60"
  resetCounters="on"
  log.syslog="on"
  ruleset="stats-ruleset"
)
