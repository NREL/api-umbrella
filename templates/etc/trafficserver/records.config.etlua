# vi: set ft=config :

LOCAL proxy.local.incoming_ip_to_bind STRING <%- config["trafficserver"]["host"] %>
CONFIG proxy.config.http.server_ports STRING <%- config["trafficserver"]["port"] %>

# Use the special "#-1" value to keep running as the current user (perp will
# handle switching the user).
CONFIG proxy.config.admin.user_id STRING #-1

# Specify where to find the TrafficServer binaries, plugins, etc. Our config
# files are in a non-default location by using TS_ROOT (this is done so that
# the config files can co-exist with the rest of the API Umbrella config files,
# and so that we can relocate the location for running tests). Therefore, we
# must explicitly point back to the original TrafficServer install directory.
# This could potentially be made cleaner without the use of TS_ROOT with the
# new proxy.config.config_dir setting
# (https://issues.apache.org/jira/browse/TS-3192), but I wasn't able to get
# that to quite work properly.
CONFIG proxy.config.bin_path STRING <%- config["_embedded_root_dir"] %>/bin
CONFIG proxy.config.plugin.plugin_dir STRING <%- config["_embedded_root_dir"] %>/libexec/trafficserver
CONFIG proxy.config.body_factory.template_sets_dir STRING <%- config["_embedded_root_dir"] %>/etc/trafficserver/body_factory

# Log to the standard API Umbrella log directory location.
CONFIG proxy.config.log.logfile_dir STRING <%- config["log_dir"] %>/trafficserver

# Log all diagnostic output to stderr (instead of also shipping it to the
# system-wide syslog).
CONFIG proxy.config.diags.output.diag STRING E
CONFIG proxy.config.diags.output.debug STRING E
CONFIG proxy.config.diags.output.status STRING E
CONFIG proxy.config.diags.output.note STRING E
CONFIG proxy.config.diags.output.warning STRING E
CONFIG proxy.config.diags.output.error STRING E
CONFIG proxy.config.diags.output.fatal STRING E
CONFIG proxy.config.diags.output.alert STRING E
CONFIG proxy.config.diags.output.emergency STRING E

# Allow longer lines in logging.
CONFIG proxy.config.log.max_line_size INT 24576;
CONFIG proxy.config.log.ascii_buffer_size INT 24576;
CONFIG proxy.config.log.log_buffer_size INT 24576;

# Disable Trafficserver's own log file rotation for these files. We'll either
# output to stdout or rotate log files with logrotate (to be consistent with
# all the other API Umbrella components).
CONFIG proxy.config.diags.logfile.rolling_enabled INT 0
CONFIG proxy.config.output.logfile.rolling_enabled INT 0

<% if config["log"]["destination"] ~= "console" then %>
  # If outputting to file, then logrotate will also be used for this file.
  CONFIG proxy.config.log.rolling_enabled INT 0
<% else %>
  # If outputting to stdout, the error.log file can't be symlinked to
  # stdout/stderr, so we still need to output to a log file, but enable
  # Trafficserver's log rotation so these don't grow very big. We'll then use
  # rsyslog to tail these files and output to stdout for us.
  #
  # This workaround should no longer be needed once Trafficserver 10 is
  # released and things can be configured to output to stdout/stderr directly:
  # https://github.com/apache/trafficserver/pull/7937
  CONFIG proxy.config.log.auto_delete_rolled_files INT 1
  CONFIG proxy.config.log.max_space_mb_for_logs INT 200
  CONFIG proxy.config.log.max_space_mb_headroom INT 20

  CONFIG proxy.config.log.rolling_enabled INT 2
  CONFIG proxy.config.log.rolling_size_mb INT 10
<% end %>

# Increase timeouts to match the timeouts in other pieces of the stack.
CONFIG proxy.config.http.connect_attempts_timeout INT <%- config["trafficserver"]["_connect_attempts_timeout"] %>
CONFIG proxy.config.http.post_connect_attempts_timeout INT <%- config["trafficserver"]["_post_connect_attempts_timeout"] %>
CONFIG proxy.config.http.transaction_no_activity_timeout_in INT <%- config["trafficserver"]["_transaction_no_activity_timeout_in"] %>
CONFIG proxy.config.http.transaction_no_activity_timeout_out INT <%- config["trafficserver"]["_transaction_no_activity_timeout_out"] %>

# Disable other timeouts so that as long as the request is streaming back we
# don't close the connection and we defer to our other layers for timeouts.
CONFIG proxy.config.http.transaction_active_timeout_in INT 0
CONFIG proxy.config.http.transaction_active_timeout_out INT 0

# Disable retries, since we're only connecting to Envoy. Envoy will be
# responsible for retrying connections if the connection is never established.
CONFIG proxy.config.http.connect_attempts_rr_retries INT 0
CONFIG proxy.config.http.connect_attempts_max_retries INT 0
CONFIG proxy.config.http.connect_attempts_max_retries_dead_server INT 0
CONFIG proxy.config.http.connect.dead.policy 0

# Don't consider the backend down, even if some requests timeout. We don't want
# some bad API requests to mark the entire backend as being down.
CONFIG proxy.config.http.down_server.cache_time INT 0

# Don't append IP information to X-Forwarded-For or Client-IP headers, since
# we've already dealt with those at the first nginx proxy layer.
CONFIG proxy.config.http.insert_client_ip INT 0
CONFIG proxy.config.http.insert_squid_x_forwarded_for INT 0

# Don't perform caching when the request contains cookies.
CONFIG proxy.config.http.cache.cache_responses_to_cookies INT 0

# Use read_while_writer to improve connection collapsing and prevent thundering
# herd scenarios for parallel requests to the same resource:
# https://docs.trafficserver.apache.org/en/7.1.x/admin-guide/configuration/cache-basics.en.html?highlight=thundering#reducing-origin-server-requests-avoiding-the-thundering-herd
#
# This is tuned to try and wait up to 2 seconds for the API response before
# making another request (this was the default in the old collapsed_connection
# plugin).
#
# Note that the retry delay is doubled on the 3rd retry onwards. So retries 1-2
# will delay 50ms each, retries 3-21 will delay 100ms each (50*2 + 100*19 =
# 2000ms total wait).
#
# Note that read_while_writer helps for the most part, but there's still other
# edge-cases where some connections aren't collapsed. However, this is okay,
# since the current alternatives don't seem to be ideal for our uses, and
# read-while-writer does what we need. But for future references:
#
# - open_read_retry: For uncacheable responses, requests become serialized, so
#   this should only ever be turned on if you know the responses will be
#   cacheable (which we do not).
# - open_write_fail_action: Returning a stale copy could be appealing, but that
#   doesn't currently work, so the only options are to return errors (which
#   doesn't fit our use case). But if the stale handling gets implemented, this
#   could be worth revisiting:
#   https://issues.apache.org/jira/browse/TS-4774
#   https://issues.apache.org/jira/browse/TS-4238
#   https://issues.apache.org/jira/browse/TS-4237
# - collapsed_forwarding experimental plugin: Might cause blocking (not
#   entirely sure), but also seems to have some issues for our use-case:
#   Returns 303s to user:
#   https://lists.apache.org/thread.html/aa26070c52c907182bb104696bfd28d92147c0ba3082468487322b43@%3Cusers.trafficserver.apache.org%3E
#   Requires enabling redirect following, which we don't want for other
#   responses:
#   https://lists.apache.org/thread.html/0eff5d9a53ef8fdf28be341f648c708bd651ad1208cddf71d532d78d@%3Cusers.trafficserver.apache.org%3E
CONFIG proxy.config.cache.enable_read_while_writer INT 1
CONFIG proxy.config.cache.read_while_writer.max_retries INT 21
CONFIG proxy.config.cache.read_while_writer_retry.delay INT 50
CONFIG proxy.config.http.background_fill_active_timeout INT 0
CONFIG proxy.config.http.background_fill_completed_threshold FLOAT 0.0
CONFIG proxy.config.cache.max_doc_size INT 0

# Traffic Server uses this proxy_name in the Via response headers. By default,
# this is a hex-encoded IP address, but returning that information may not be
# desirable, so instead use a hard-coded name instead.
CONFIG proxy.config.proxy_name STRING api-umbrella

# Include information in the Via response indicating whether this was a cache
# hit or not.
CONFIG proxy.config.http.insert_response_via_str INT 2

# Do not include the Via headers on the requests to the backend servers. This
# is for two reasons:
# - It may disable gzip responses from underlying API backend servers by
#   default: https://community.akamai.com/community/web-performance/blog/2015/05/06/beware-the-via-header-disabled-compression-can-have-a-performance-impact
# - It prevents API Umbrella from making circular requests to itself as an API
#   backend (which is admittedly an edge-case, but we had some usage of this):
#   https://issues.apache.org/jira/browse/TS-2298
CONFIG proxy.config.http.insert_request_via_str INT 0

# Don't include the TrafficServer version number in the Via headers.
CONFIG proxy.config.http.request_via_str STRING ApacheTrafficServer
CONFIG proxy.config.http.response_via_str STRING ApacheTrafficServer

# Don't override the "Server" response header with the TrafficServer signature.
CONFIG proxy.config.http.response_server_enabled INT 0

# Retain the Host header we send to trafficserver for cache key purposes so
# that each host gets cached separately.
CONFIG proxy.config.url_remap.pristine_host_hdr INT 1

# Use more standard round-robin for DNS results (rather than sticky).
CONFIG proxy.config.hostdb.strict_round_robin INT 1

# Enable so_keepalive on the incoming and outgoing sockets to better detect
# keepalive hangups.
CONFIG proxy.config.net.sock_option_flag_in INT 7
CONFIG proxy.config.net.sock_option_flag_out INT 3

# Enable for debug logging.
# CONFIG proxy.config.diags.debug.enabled INT 1
# CONFIG proxy.config.diags.debug.tags STRING .*

# Additional custom configuration
<% for _, record in ipairs(config["trafficserver"]["embedded_server_config"]["records"]) do %>
  <%- record %>
<% end %>
