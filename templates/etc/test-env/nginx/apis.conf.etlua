lua_shared_dict test_data 32k;

server {
  listen 9444;
  listen [::]:9444;
  listen 127.0.0.1:9441;

  set $x_api_umbrella_request_id $http_x_api_umbrella_request_id;
  lua_use_default_type off;
  default_type "";

  gzip off;

  access_by_lua_block {
    ngx.shared.test_data:set("backend_called", true)
  }

  rewrite ^/backend-prefix/(.+)$ /$1 last;

  location /hello {
    if ($request_method != POST) {
      echo -n "Hello World";
    }

    if ($request_method = POST) {
      echo -n "Goodbye";
    }
  }

  location = /echo {
    echo_read_request_body;
    echo $request_body;
  }

  location = /echo_delayed_chunked {
    content_by_lua_block {
      local input = ngx.unescape_uri(ngx.var.arg_input)
      for index = 1, #input do
        local char = input:sub(index, index)
        ngx.print(char)
        ngx.flush()
        ngx.sleep(math.random(5, 15) / 1000)
      end
    }
  }

  location = /restricted {
    echo -n "Restricted Access";
  }

  location = /not/restricted {
    echo -n "Not Restricted";
  }

  location = /utf8 {
    more_set_headers "X-Example: tést";
    echo -n "Hellö Wörld";
  }

  location = /sleep {
    echo_sleep 1;
    echo -n "Sleepy head";
  }

  location = /sleep_timeout {
    echo_sleep 1;
    echo -n "Sleepy head";
  }

  location /auth/ {
    access_by_lua_block {
      local username = ngx.var.remote_user
      local password = ngx.var.remote_passwd
      if username == "somebody" and password == "secret" then
        return
      elseif username == "anotheruser" and password == "anothersecret" then
        return
      else
        ngx.header["WWW-Authenticate"] = [[Basic realm="Authorization Required"]]
        ngx.status = ngx.HTTP_UNAUTHORIZED
        ngx.print("Unauthorized")
        ngx.exit(ngx.HTTP_OK)
      end
    }
    echo -n $remote_user;
  }

  location /headers/ {
    more_set_headers "X-Existing1: existing1";
    more_set_headers "x-existing2: existing2";
    more_set_headers "X-EXISTING3: existing3";
    echo -n "Hello World";
  }

  location /redirect-301/ {
    rewrite_by_lua_block {
      ngx.redirect(ngx.unescape_uri(ngx.var.arg_to or "/hello"), ngx.HTTP_MOVED_PERMANENTLY)
    }
  }

  location /redirect {
    rewrite_by_lua_block {
      ngx.redirect(ngx.unescape_uri(ngx.var.arg_to or "/hello"))
    }
  }

  location /info/ {
    more_set_headers "X-Received-Method: $request_method";
    content_by_lua_block {
      local cjson = require "cjson";
      local raw_url = ngx.var.scheme .. "://" .. ngx.var.host .. ngx.var.request_uri
      ngx.header["Content-Type"] = "application/json"
      ngx.print(cjson.encode({
        method = ngx.var.request_method,
        headers = ngx.req.get_headers(500),
        local_interface_ip = ngx.var.server_addr,
        raw_url = raw_url,
        url = {
          host = ngx.var.host,
          hostname = ngx.var.hostname,
          href = raw_url,
          path = ngx.var.request_uri,
          pathname = ngx.var.uri,
          port = ngx.var.server_port,
          protocol = ngx.var.scheme .. ":",
          query = ngx.req.get_uri_args(500),
        },
        basic_auth_username = ngx.var.remote_user,
        basic_auth_password = ngx.var.remote_passwd,
        request_length = tonumber(ngx.var.request_length),
      }))
    }
  }

  location /connection-stats/ {
    content_by_lua_block {
      local cjson = require "cjson";
      ngx.sleep(0.3)
      ngx.header["Content-Type"] = "application/json"
      ngx.say(cjson.encode({
        connection = tonumber(ngx.var.connection),
        connection_requests = tonumber(ngx.var.connection_requests),
        connections_active = tonumber(ngx.var.connections_active),
        connections_reading = tonumber(ngx.var.connections_reading),
        connections_waiting = tonumber(ngx.var.connections_waiting),
        connections_writing = tonumber(ngx.var.connections_writing),
      }))
    }
  }

  location = /upload {
    content_by_lua_block {
      local cjson = require "cjson";
      local upload = require "resty.upload";

      local upload_size = 0
      local chunk_size = 4096
      local form = upload:new(chunk_size)
      while true do
        local typ, res, err = form:read()
        if typ == "body" then
          upload_size = upload_size + #res
        elseif typ == "eof" then
          break
        end
      end

      ngx.header["Content-Type"] = "application/json"
      ngx.print(cjson.encode({
        upload_size = upload_size,
      }))
    }
  }

  location = /chunked {
    echo -n "hello";
    echo_flush;
    echo_sleep 0.5;
    echo -n "salutations";
    echo_flush;
    echo_sleep 0.5;
    echo -n "goodbye";
  }

  location = /receive_chunks {
    # TODO
  }

  location ~ ^/compressible/([0-9]+)$ {
    set $size $1;
    content_by_lua_block {
      ngx.header["Content-Type"] = ngx.unescape_uri(ngx.var.arg_content_type or "text/plain");
      ngx.header["Content-Length"] = ngx.var.size
      ngx.print(string.rep("a", tonumber(ngx.var.size)))
    }
  }

  location ~ ^/compressible-chunked/([0-9]+)/([0-9]+)$ {
    set $chunks $1;
    set $size $2;
    content_by_lua_block {
      local size = tonumber(ngx.var.size)
      ngx.header["Content-Type"] = ngx.unescape_uri(ngx.var.arg_content_type or "text/plain");
      ngx.sleep(0.05)
      for index = 1, tonumber(ngx.var.chunks) do
        ngx.print(string.rep("a", size))
      end
    }
  }

  location ~ ^/compressible-delayed-chunked/([0-9]+)$ {
    set $size $1;
    content_by_lua_block {
      local size = tonumber(ngx.var.size)
      ngx.header["Content-Type"] = ngx.unescape_uri(ngx.var.arg_content_type or "text/plain");

      ngx.print(string.rep("a", size))
      ngx.flush()
      ngx.sleep(0.5)

      ngx.print(string.rep("a", size))
      ngx.flush()
      ngx.sleep(0.5)

      ngx.print(string.rep("a", size))
    }
  }

  location = /compressible-pre-gzip {
    gzip on;
    gzip_min_length 0;
    gzip_types application/json;
    content_by_lua_block {
      local cjson = require "cjson";
      local body = cjson.encode({
        headers = ngx.req.get_headers(500),
      })

      if ngx.var.arg_force == "true" then
        -- Force nginx to gzip this response, even if the original input headers
        -- wouldn't normally gzip.
        ngx.req.set_header("Accept-Encoding", "gzip")
      end

      ngx.header["Content-Type"] = "application/json"
      ngx.print(body)
    }
  }

  location ~ ^/delay/([0-9]+)$ {
    set $delay $1;
    content_by_lua_block {
      ngx.sleep(tonumber(ngx.var.delay) / 1000)
      ngx.print("done")
    }
  }

  location ~ ^/delay-sec/([0-9.]+)$ {
    set $delay $1;

    access_by_lua_block {
      local counter_id = ngx.var.arg_backend_counter_id
      if counter_id then
        local key = "backend_call_count:" .. counter_id
        return ngx.shared.test_data:incr(key, 1) or ngx.shared.test_data:set(key, 1)
      end
    }

    content_by_lua_block {
      ngx.sleep(tonumber(ngx.var.delay))
      ngx.print("done")
    }
  }

  location ~ ^/delays/([0-9]+)/([0-9]+)$ {
    set $delay1 $1;
    set $delay2 $2;
    content_by_lua_block {
      local delay1 = tonumber(ngx.var.delay1) / 1000
      local delay2 = tonumber(ngx.var.delay2) / 1000

      ngx.sleep(delay1)
      ngx.print("first")
      ngx.flush()

      ngx.sleep(delay2 - delay1)
      ngx.print("done")
      ngx.flush()
    }
  }

  location ~ ^/delays-sec/([0-9]+)/([0-9]+)$ {
    set $delay1 $1;
    set $delay2 $2;
    content_by_lua_block {
      local delay1 = tonumber(ngx.var.delay1)
      local delay2 = tonumber(ngx.var.delay2)

      ngx.sleep(delay1)
      ngx.print("first")
      ngx.flush()

      ngx.sleep(delay2 - delay1)
      ngx.print("done")
      ngx.flush()
    }
  }

  location /cacheable-but-not/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location ~ ^/cacheable-thundering-herd/(.+)$ {
    set $unique_id $1;
    set_secure_random_alphanum $random 50;
    content_by_lua_block {
      local key = "backend_call_count:" .. ngx.var.unique_id
      local ok = ngx.shared.test_data:incr(key, 1) or ngx.shared.test_data:set(key, 1)

      local delay = tonumber(ngx.var.http_x_delay)

      if ngx.var.http_x_delay_before == "headers" then
        ngx.sleep(delay)
      end

      ngx.header["Cache-Control"] = ngx.var.http_x_cache_control_response
      ngx.header["X-Unique-Output"] = ngx.var.random
      ngx.print("")
      ngx.flush(true)

      if ngx.var.http_x_delay_before == "body" then
        ngx.sleep(delay)
      end

      ngx.print(ngx.var.random)
    }
  }

  location /cacheable-cache-control-max-age/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=60";
    more_set_headers "X-Unique-Output: $random";
    more_set_headers "X-Received-Method: $request_method";
    echo $random;
  }

  location /cacheable-cache-control-s-maxage/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: s-maxage=60";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location /cacheable-cache-control-case-insensitive/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "CAcHE-cONTROL: max-age=60";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location /cacheable-expires/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "X-Unique-Output: $random";
    expires 60;
    echo $random;
  }

  location /cacheable-expires-0/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Expires: 0";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location /cacheable-expires-past/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Expires: Sat, 05 Sep 2015 17:58:16 GMT";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location /cacheable-set-cookie/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=60";
    more_set_headers "X-Unique-Output: $random";
    rewrite_by_lua_block {
      local cookies = {
        "foo=bar",
      }

      ngx.req.read_body()
      local body = ngx.req.get_body_data()
      if body then
        local cjson = require "cjson"
        local data = cjson.decode(body)
        if data and data["set_cookies"] then
          cookies = data["set_cookies"]
        end
      end

      ngx.header.set_cookie = cookies
    }
    echo $random;
  }

  location /cacheable-www-authenticate/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=60";
    more_set_headers "WWW-Authenticate: Basic";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location /cacheable-surrogate-control-max-age/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Surrogate-Control: max-age=60";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location /cacheable-surrogate-control-case-insensitive/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "SURrOGATE-CONtROL: max-age=60";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location /cacheable-surrogate-control-and-cache-control/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Surrogate-Control: max-age=60";
    more_set_headers "Cache-Control: max-age=0, private, must-revalidate";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location /cacheable-dynamic/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=60";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location /cacheable-compressible/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=60";
    more_set_headers "Content-Type: text/plain";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
    echo_duplicate 1500 "a"; # 1500 bytes - long enough to allow gzip
  }

  location /cacheable-pre-gzip/ {
    gzip on;
    gzip_min_length 0;
    gzip_types application/json;
    set_secure_random_alphanum $random 50;
    content_by_lua_block {
      local cjson = require "cjson";
      local body = cjson.encode({
        headers = ngx.req.get_headers(500),
        random = ngx.var.random,
        data = string.rep("a", 1500) -- 1500 bytes - long enough to allow gzip
      })

      if ngx.var.arg_force == "true" then
        -- Force nginx to gzip this response, even if the original input headers
        -- wouldn't normally gzip.
        ngx.req.set_header("Accept-Encoding", "gzip")
      end

      ngx.header["Content-Type"] = "application/json"
      ngx.header["Cache-Control"] = "max-age=60"
      ngx.header["X-Unique-Output"] = ngx.var.random
      ngx.print(body)
    }
  }

  location /cacheable-vary-accept-encoding/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=60";
    more_set_headers "Content-Type: text/plain";
    more_set_headers "Vary: Accept-Encoding";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
    echo_duplicate 1500 "a"; # 1500 bytes - long enough to allow gzip
  }

  location /cacheable-pre-gzip-multiple-vary/ {
    gzip on;
    gzip_min_length 0;
    gzip_types application/json;
    set_secure_random_alphanum $random 50;
    content_by_lua_block {
      local cjson = require "cjson";
      local body = cjson.encode({
        headers = ngx.req.get_headers(500),
        random = ngx.var.random,
        data = string.rep("a", 1500) -- 1500 bytes - long enough to allow gzip
      })

      -- Force nginx to gzip this response, even if the original input headers
      -- wouldn't normally gzip.
      ngx.req.set_header("Accept-Encoding", "gzip")

      ngx.header["Content-Type"] = "application/json"
      ngx.header["Cache-Control"] = "max-age=60"
      ngx.header["Vary"] = "X-Foo,Accept-Encoding,Accept"
      ngx.header["X-Unique-Output"] = ngx.var.random
      ngx.print(body)
    }
  }

  location /cacheable-vary-accept-encoding-multiple/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=60";
    more_set_headers "Content-Type: text/plain";
    more_set_headers "Vary: X-Foo,Accept-Encoding,Accept";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
    echo_duplicate 1500 "a"; # 1500 bytes - long enough to allow gzip
  }

  location /cacheable-vary-x-custom/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=60";
    more_set_headers "Vary: X-Custom";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location /cacheable-vary-accept-encoding-accept-separate/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=60";
    more_set_headers "Vary: Accept-Encoding";
    more_set_headers "Vary: Accept";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location /cacheable-multiple-vary/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=60";
    more_set_headers "Content-Type: text/plain";
    more_set_headers "Vary: X-Foo,Accept-Language,Accept";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
  }

  location /cacheable-multiple-vary-with-accept-encoding/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=60";
    more_set_headers "Content-Type: text/plain";
    more_set_headers "Vary: X-Foo,Accept-Language,Accept-Encoding,Accept";
    more_set_headers "X-Unique-Output: $random";
    echo $random;
    echo_duplicate 1500 "a"; # 1500 bytes - long enough to allow gzip
  }

  location /cacheable-backend-reports-cached/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=60";
    more_set_headers "Age: 3";
    more_set_headers "X-Cache: HIT";
    echo $random;
  }

  location /cacheable-backend-reports-not-cached/ {
    set_secure_random_alphanum $random 50;
    more_set_headers "Cache-Control: max-age=60";
    more_set_headers "Age: 0";
    more_set_headers "X-Cache: BACKEND-MISS";
    echo $random;
  }

  location /cacheable-backend-port/ {
    more_set_headers "Cache-Control: max-age=60";
    set_secure_random_alphanum $random 50;
    more_set_headers "X-Unique-Output: $random";
    echo -n $server_port;
  }

  location /cacheable-backend-host/ {
    more_set_headers "Cache-Control: max-age=60";
    set_secure_random_alphanum $random 50;
    more_set_headers "X-Unique-Output: $random";
    echo -n $host;
  }

  location /via-header/ {
    more_set_headers "Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)";
    echo -n "hello";
  }

  location /logging-example/ {
    more_set_headers "Age: 20";
    more_set_headers "Content-Type: text/plain; charset=utf-8";
    more_set_headers "Content-Length: 5";
    expires 60;
    echo -n "hello";
  }

  location /logging-multiple-request-headers/ {
    content_by_lua_block {
      local cjson = require "cjson"
      local header = ngx.var.arg_header
      local raw_header = ngx.req.raw_header(true)
      local _, num_matches = ngx.re.gsub(raw_header, "^" .. header .. ": ", "", "im")
      ngx.header["Content-Type"] = "application/json"
      ngx.print(cjson.encode({
        header_occurrences_received = num_matches,
        header_value = ngx.req.get_headers()[header],
      }))
    }
  }

  location /logging-multiple-response-headers/ {
    content_by_lua_block {
      ngx.header[ngx.var.arg_header] = { "11", "45" }
      ngx.print("OK")
    }
  }

  location /logging-long-response-headers/ {
    more_set_headers "Content-Encoding: 12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890";
    more_set_headers "Content-Type: 12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890";
    more_set_headers "Server: 12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890";
    echo $random;
  }

  location /response-headers-length/ {
    content_by_lua_block {
      local header_length = tonumber(ngx.var.arg_header_length)
      local header_count = tonumber(ngx.var.arg_header_count)
      for index = 1, header_count do
        ngx.header["X-Foo" .. index] = string.rep("a", header_length)
      end

      ngx.print("Hello")
    }
  }

  location /response-header-value/ {
    content_by_lua_block {
      -- If setting the "Transfer-Encoding" header, we need to explicitly set a
      -- "Content-Length" so that the default "Transfer-Encoding: chunked"
      -- header isn't present (which would lead to duplicate headers). And when
      -- testing setting it to "chunked" just don't set anything at all so that
      -- duplicate headers don't get set (which isn't valid).
      if string.lower(ngx.var.arg_header) == "transfer-encoding" then
        if ngx.var.arg_header_value ~= "chunked" then
          ngx.header["Content-Length"] = 2
          ngx.header[ngx.var.arg_header] = ngx.var.arg_header_value
        end
      else
        ngx.header[ngx.var.arg_header] = ngx.var.arg_header_value
      end
      ngx.print("OK")
    }
  }

  location /request-body-streaming/ {
    content_by_lua_block {
      local cjson = require "cjson"

      ngx.update_time()
      local timer = ngx.now()

      -- Drop down to raw sockets to see how chunks are received in a streaming
      -- fashion. Based on chunked handling from openresty test suite:
      -- https://github.com/openresty/lua-nginx-module/blob/89818721fefa3bac9aec99dd622ee4547a9794d9/t/116-raw-req-socket.t#L785
      local sock, err = ngx.req.socket(true)
      if not sock then
        ngx.log(ngx.ERR, "failed to new: ", err)
        return
      end
      local function error_exit(...)
        ngx.log(ngx.ERR, ...)
        return ngx.exit(400)
      end

      -- Actually begin the response before the request has been received
      -- entirely. This is to ensure that when testing a longer
      -- "proxy_send_timeout" we don't end up hitting the "proxy_read_timeout"
      -- sooner, which is expecting some type of response back.
      local ok, err = sock:send(
        "HTTP/1.1 200 OK\r\n" ..
        "Connection: keep-alive\r\n" ..
        "Content-Type: application/json\r\n" ..
        "Transfer-Encoding: chunked\r\n\r\n"
      )
      if not ok then
        error_exit("failed to send response: ", err)
      end

      local MAX_CHUNKS = 1000
      local eof = false
      local chunks = {}
      local chunk_time_gaps = {}
      for i = 1, MAX_CHUNKS do
        local line, err = sock:receive()
        if not line then
          error_exit("failed to receive chunk size: ", err)
        end

        local size = tonumber(line, 16)
        if not size then
          error_exit("bad chunk size: ", line)
        end

        if size == 0 then -- last chunk
          -- receive the last line
          line, err = sock:receive()
          if not line then
            error_exit("failed to receive last chunk: ", err)
          end

          if line ~= "" then
            error_exit("bad last chunk: ", line)
          end

          eof = true
          break
        end

        local chunk, err = sock:receive(size)
        if not chunk then
          error_exit("failed to receive chunk of size ", size, ": ", err)
        end

        local data, err = sock:receive(2)
        if not data then
          error_exit("failed to receive chunk terminator: ", err)
        end

        if data ~= "\r\n" then
          error_exit("bad chunk terminator: ", data)
        end

        ngx.update_time()
        table.insert(chunk_time_gaps, ngx.now() - timer)
        timer = ngx.now()

        chunks[i] = chunk

        -- Send periodic responses of an empty space (" ") on the response to
        -- ensure we don't hit the shorter "proxy_read_timeout" in tests.
        local ok, err = sock:send("1\r\n \r\n")
        if not ok then
          error_exit("failed to send response: ", err)
        end
      end

      if not eof then
        error_exit("too many chunks (more than ", MAX_CHUNKS, ")")
      end

      local body = cjson.encode({
        chunks = chunks,
        chunk_time_gaps = chunk_time_gaps,
      })
      local ok, err = sock:send(#body .. "\r\n" .. body .. "\r\n")
      if not ok then
        error_exit("failed to send response: ", err)
      end

      ok, err = sock:close()
      if not ok then
        error_exit("failed to close socket: ", err)
      end
    }
  }

  location = / {
    echo -n "Test Home Page";
  }

  location / {
    echo_status 404;
    more_set_headers "Content-Type: text/html";
    echo -n "Test 404 Not Found";
  }
}

server {
  listen 127.0.0.1:9443;

  location = / {
    echo -n "Test Website Home Page";
  }

  location = /allow-frame/ {
    more_set_headers "X-Frame-Options: ALLOWALL";
    echo -n "frame";
  }

  location / {
    echo_status 404;
    more_set_headers "Content-Type: text/plain";
    echo -n "Test Website 404 Not Found";
  }
}

server {
  listen 127.0.0.1:9440;

  location = / {
    echo -n "Test Default Website Home Page";
  }

  location / {
    echo_status 404;
    more_set_headers "Content-Type: text/plain";
    echo -n "Test Default Website 404 Not Found";
  }
}

server {
  listen 127.0.0.1:9442;

  set $x_api_umbrella_request_id $http_x_api_umbrella_request_id;

  location = /reset_backend_called {
    content_by_lua_block {
      ngx.shared.test_data:set("backend_called", false)
    }
  }

  location = /backend_called {
    content_by_lua_block {
      ngx.print(ngx.shared.test_data:get("backend_called"))
    }
  }

  location = /backend_call_count {
    content_by_lua_block {
      ngx.print(ngx.shared.test_data:get("backend_call_count:" .. ngx.var.arg_id) or 0)
    }
  }
}

server {
  listen 127.0.0.1:9448 default_server ssl;
  server_name _;
  ssl_certificate <%- config["_src_root_dir"] %>/test/config/ssl_test.crt;
  ssl_certificate_key <%- config["_src_root_dir"] %>/test/config/ssl_test.key;

  # As the default server terminate the SSL connection. This allows us to test
  # for situations where the backend server requires SNI.
  ssl_certificate_by_lua_block {
    local ssl = require "ngx.ssl"
    local ok, err = ssl.clear_certs()
    if not ok then
      ngx.log(ngx.ERR, "failed to clear existing (fallback) certificates")
      return ngx.exit(ngx.ERROR)
    end
  }
}

server {
  listen 127.0.0.1:9448 ssl;
  server_name sni1.sni-tests.test;
  ssl_certificate <%- config["_src_root_dir"] %>/test/config/ssl_test.crt;
  ssl_certificate_key <%- config["_src_root_dir"] %>/test/config/ssl_test.key;

  location / {
    echo -n "SNI1";
  }
}

server {
  listen 127.0.0.1:9448 ssl;
  server_name sni2.sni-tests.test;
  ssl_certificate <%- config["_src_root_dir"] %>/test/config/ssl_test.crt;
  ssl_certificate_key <%- config["_src_root_dir"] %>/test/config/ssl_test.key;

  location / {
    echo -n "SNI2";
  }
}
